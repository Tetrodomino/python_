# 넘파이 패키지
import numpy as np # 넘파이 패키지 임포트

"""
그냥 import numpy 로 하면 사용할 때 numpy로 호출해야 하나

import numpy as np 로 하면 np로 호출함
"""

a = np.array([1, 2, 3, 4, 5]) # 리스트 []를 배열로 변환해서 적용

print(type(a)) # <class 'numpy.nadarray'>


# 넘파이의 벡터는 벡터화 연산을 제공함
# 가령, 배열을 각 항목을 2배로 하고 싶으면 아래와 같은 방식으로 가능
print(a * 2)


# 2차원 배열 만들기
a = np.array([[0, 1, 2], [3, 4, 5]])

print(len(a)) # 2, 행의 갯수
print(len(a[0])) # 3, 열의 갯수


# 3차원 배열 만들기
# 이하 3차원 배열은 2 × 3 × 4 크기임
a = np.array([[[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]],
              [[11, 12, 13, 14], [15, 16, 17, 18], [19, 20, 21, 22]]])

print(a.ndim) # 3, 배열의 차원
print(a.shape) # (2, 3, 4), 배열의 크기 


# 배열의 인덱싱 - 리스트와 같음
b = np.array([1, 2, 3, 4, 5])

print(b[0]) # 1

# 다차원 배열은 콤마로 접근 가능
print(a[1, 0, 1]) # 12


# 배열의 슬라이싱 - 리스트와 같으며 다차원 배열은 콤마로 구분
# 전체 반환
print(b[:])

# 2번째부터 3번째
print(b[1:3])

# a[0, 1, 1]과 a[1, 1, 1] 반환
print(a[:, 1, 1]) 

########################################
# 연습문제
m = np.array([[0, 1, 2, 3, 4], [5, 6, 7, 8, 9], [10, 11, 12, 13, 14]])

# 1. 7 인덱싱
print(m[1, 2])

# 2. [7, 12] 인덱싱
print(m[1:, 2])

# 3. [[3, 4], [8, 9]] 인덱싱
print(m[:2, 3:])
########################################


